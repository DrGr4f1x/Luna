TODO:
-- Guard against illegal command context calls between BeginRendering and EndRendering
-- Proper Vulkan extension support
-- Clean up ShaderCompiler code organization
-- Proper DX12 feature support
-- Mesh shaders
-- Ray tracing
-- Bindless support
-- Handle authoritative window size in Application better
-- EngineProfiling from MiniEngine
-- How to do ClearUAV(IColorBuffer*) in Vulkan
-- Separate Front/Back stencil ref, both platforms
-- Get rid of UserDescriptorHeap in DX12 - should ideally only bind one Heap of each type (CbvSrvUav and Sampler) per frame, for perf
-- Refactor commandline parameters at Application level
-- Look into DX12 Present one more time
-- Handle WindowSize better in the DeviceManagers
-- DX12 device removed (look for TODO in DeviceManager12.cpp)
-- OnDeviceLost/OnDeviceRestored in DeviceManagers - do I actually need this?
-- Move CommandContext::Reset logic into CommandManager::AllocateContext (?)
-- Think about refactoring/simplifying CameraController.  I've never loved this class.
-- Take another look at Shaders.  Not super happy with how things are.
-- Refactor Vulkan DescriptorSet, now that DescriptorSetPool exists
-- Do a Vulkan DynamicDescriptorHeap implementation using mutable descriptors
-- Do a Vulkan DynamicDescriptorHeap implementation using descriptor buffers
-- Support dynamic buffers in Vulkan DynamicDescriptorHeap
-- Rework Vulkan Queues to handle case where the device doesn't support separate compute/copy queues
-- Run static analysis pass on solution
-- External library rework
    -- Move everything possible to git submodules (Nuget stuff isn't up to date, unless from Microsoft)
    -- Maybe make a script to auto-update and auto-build
    -- ktx too
-- Integrate Superluminal
-- Sanity check resource recreation - all the logic for cached resources like pipeline states, shaders, textures etc.
-- Improve error handling
-- Mipmap generation
-- Look at normals in the BloomApp - Vulkan seems wrong.
-- Standardize matrix handling in shaders.
-- Implement a way to get allocate individual DescriptorSets from a RootSignature, so that per-frame data (etc) can be set at a lower cadence than every draw.
-- Auto-register and auto-update window size dependent resources?
-- Figure out device lost in vulkan multisampling app
-- IndirectDraw app - support multi-draw indirect
-- Directly create DescriptorSets without needing RootSignature
-- Fix DynamicUniformBuffer in Vulkan
-- Fix GeometryShader for DX12

DONE:
-- Handles and pools for:
    -- GraphicsPipelineState
    -- DescriptorSet
    -- GpuBuffer
    -- RootSignature
    -- ColorBuffer
    -- DepthBuffer
-- Backbuffer count (3) is hardcoded - handle this a different way
-- All platform resources (e.g. ColorBuffer, GpuBuffer) should store their creation Descs.  Actually the corresponding Pool should hold the Descs.
-- DX12: Dynamic descriptors (e.g. SetSRV, SetUAV etc on command context)
-- Get rid of the GraphicsDevice class altogether.  It serves no purpose at this point.
-- Integrate vk-bootstrap.  Will need to be a git submodule, with source files compiled in to the engine
-- Implement DefaultDynamicDescriptorHeap for vanilla Vulkan (no extensions)
-- Update to Vulkan API v1.4
-- Ensure Vulkan works without installing Volk or VMA with the Vulkan SDK
-- Refactor various pools into single pool for all pool-managed resource types
-- Do a const pass on the Handle* parameters passed into the various Pool member functions
-- Texture loading
    -- DDS
    -- KTX
    -- STB
-- Command context linear allocator for dynamic buffers
-- Mesh loading
-- Look into Vulkan Present one more time
-- Fix .gitignore to allow bin directories under External
-- Refactor shader compilation using CustomBuild in VS
-- Fixed busted camera position
-- Integrate FramePro
-- Add a default depth buffer to the DeviceManager
-- Fuck it, put a fence back in to Vulkan present synchro
-- Actually delete all the Delete Me files
-- Add helper functions to create basic resource types like vertex buffers etc.
-- Support 16-bit index buffers in Model.h/.cpp
-- Static sampler support
-- Add instanced draw function to Model class.  Test out in the Instancing app.
-- Refactor m_vkSwapChainImages in DeviceManagerVK.  This is semi-redundant with m_swapChainBuffers
-- Move default depth buffer to the application level
-- Refactor CreateWindowSizeDependentResources such that the Application method always gets called first, and then calls the derived Application method
-- ComputeContext
-- Do a StaticSampler pass over all apps


WON'T DO:
-- Try out std::variant for platform data, e.g. ID3D12Resource & VkImage
    -- ColorBuffer
    -- DepthBuffer
    -- GpuBuffer
    -- RootSignature
    -- GraphicsPipeline
-- Handles and pools for:
    -- ComputePipelineState
    -- MeshletPipelineState
    -- RayTracing (??)
-- Try out std::span for IGpuBuffer::Update