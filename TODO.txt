TODO:
-- Guard against illegal command context calls between BeginRendering and EndRendering
-- Proper Vulkan extension support
-- Clean up ShaderCompiler code organization
-- Proper DX12 feature support
-- DX12: Dynamic descriptors (e.g. SetSRV, SetUAV etc on command context)
-- Vulkan: Dynamic descriptors / push descriptors (e.g. SetSRV, SetUAV etc on command context)
-- Command context linear allocator for dynamic buffers
-- Handles and pools for:
    -- ComputePipelineState
    -- MeshletPipelineState
    -- RayTracing (??)
-- ComputeContext
-- Mesh shaders
-- Ray tracing
-- Texture loading
-- Mesh loading
-- Bindless support
-- Handle authoritative window size in Application better
-- EngineProfiling from MiniEngine
-- How to do ClearUAV(IColorBuffer*) in Vulkan
-- Separate Front/Back stencil ref, both platforms
-- Get rid of UserDescriptorHeap in DX12 - should ideally only bind one Heap of each type (CbvSrvUav and Sampler) per frame, for perf
-- Refactor commandline parameters at Application level
-- Look into DX12 Present one more time
-- Look into Vulkan Present one more time - Timeline semaphore?
-- Handle WindowSize better in the DeviceManagers
-- DX12 device removed (look for TODO in DeviceManager12.cpp)
-- OnDeviceLost/OnDeviceRestored in DeviceManagers - do I actually need this?
-- Try out std::span for IGpuBuffer::Update
-- Move Reset logic into CommandManager::AllocateContext (?)
-- Refactor m_vkSwapChainImages in DeviceManagerVK.  This is semi-redundant with m_swapChainBuffers
-- Think about refactoring/simplifying CameraController.  I've never loved this class.
-- Take another look at Shaders.  Not super happy with how things are.
-- Trim GraphicsDeviceDesc - most of that stuff is on the DeviceManager, unneeded by the GraphicsDevice itself
-- Integrate vk-bootstrap.  Will need to be a git submodule, with source files compiled in to the engine
-- Do a const pass on the Handle* parameters passed into the various Pool member functions
-- Get rid of the GraphicsDevice class altogether.  It serves no purpose at this point.


DONE:
-- Handles and pools for:
    -- GraphicsPipelineState
    -- DescriptorSet
    -- GpuBuffer
    -- RootSignature
    -- ColorBuffer
    -- DepthBuffer
-- Backbuffer count (3) is hardcoded - handle this a different way
-- All platform resources (e.g. ColorBuffer, GpuBuffer) should store their creation Descs.  Actually the corresponding Pool should hold the Descs.


WON'T DO:
[Note: Using a Handle/Pool design instead.]
-- Try out std::variant for platform data, e.g. ID3D12Resource & VkImage
    -- ColorBuffer
    -- DepthBuffer
    -- GpuBuffer
    -- RootSignature
    -- GraphicsPipeline